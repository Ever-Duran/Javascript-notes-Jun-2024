document.getElementById(obj.inputVal).textContent = obj.msg;

//******//
Regular expressions can take flags to modify their behavior. 
For instance, the i flag can be used to make the expression ignore case, 
causing it to match hello, HELLO, and Hello for the expression /hello/.

Flags are added after the trailing slash. Add the i flag to your helpRegex.
const helpRegex = /please help/i;

//******//
Strings have a .match() method, which accepts a regular expression as an argument and determines if the string matches that expression.
Update your isSpam() function to implicitly return the result of calling the .match() method on msg, passing helpRegex as the argument.

*
const isSpam = (msg) => msg.match(helpRegex);

Instead of using the .match() method, you can use the .test() method of a regular expression to test if a string matches the pattern. 
Unlike .match(), .test() returns a boolean value indicating whether or not the string matches the pattern.

*
const isSpam = (msg) => helpRegex.test(msg);

//******//

The regular expression /yes|no/ will match either yes or no.
Update your helpRegex to match either please help or assist me.

*
const helpRegex = /please help|assist me/i;

//************//

The .some() method. Like the .filter() method, .some() accepts a callback function which should take an element of the array as the argument. 
The .some() method will return true if the callback function returns true for at least one element in the array.
Here is an example of a .some() method call to check if any element in the array is an uppercase letter.

Example Codeconst arr = ["A", "b", "C"];arr.some(letter => letter === letter.toUpperCase());

*
const isSpam = (msg) => helpRegex.test(msg);

*
const dollarRegex = /[0-9] dollars/i;

We add + as there will be more than one digit
*
const dollarRegex = /[0-9]+ dollars/i;

Values are added

*
const dollarRegex = /[0-9]+ hundred|thousand|million|billion dollars/i;

//*********//

You can define a capture group by wrapping a part of your expression in parentheses. 
*
const dollarRegex = /[0-9]+(hundred|thousand|million|billion) dollars/i;

While this expression does match 1 hundred dollars, it will not match 1  hundred  dollars, or 10 dollars.
Replace the first literal space with the \s* expression. 
The \s character class matches whitespace, such as spaces, tabs, and new lines. The * quantifier means "match the previous
 character 0 or more times".
Replace the second literal space with \s+. The + quantifier means "match the previous character at least one time".

*
const dollarRegex = /[0-9]+\s*(hundred|thousand|million|billion)?\s+dollars/i;


//****'' /
One last thing with this expression. You don't actually need the match value from your capture group, so you can turn it into a non-capturing group. This will allow you to group the characters together without preserving the result.

To create a non-capturing group in a regular expression, you can add ?: after the opening parenthesis of a group. For instance, (?:a|b) will match either a or b, but it will not capture the result.

Update your regular expression to use a non-capturing group.

*
const dollarRegex = /[0-9]+\s*(?:hundred|thousand|million|billion)?\s+dollars/i;


const freeRegex = /fr[e3][e3] m[o0]n[e3]y/i;

//*****//

To match the beginning of the text, you can use the ^ anchor. This asserts that your pattern match starts at the beginning of the full string.

*
const freeRegex = /(?:^|\s)fr[e3][e3] m[o0]n[e3]y\s/i;


//****//

Like the ^ anchor, you can use the $ anchor to match the end of the string.


*
const freeRegex = /(?:^|\s)fr[e3][e3] m[o0]n[e3]y(?:\s|$)/i;


//*****//

To put everything you have learned together, update your dearRegex to map the vowels to the corresponding numbers (note that i should match 1, and also match the pipe symbol |), and to match whole words.


const dearRegex = /(?:^|\s)d[e3][a4@]r fr[i|1][e3]nd(?:$|\s)/i;


