01. Getting Started with React Redux

In a React Redux app, you create a single Redux store that manages the state of your entire app. 
Your React components subscribe to only the pieces of data in the store that are relevant to their role. 
Then, you dispatch actions directly from React components, which then trigger store updates



my answer(code):
class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  
  // Change code above this line
  render() {
    return <div />
  }
};


*****************************************

02. Manage State Locally First

Here you will finish creating the DisplayMessages component.

my answer(code):
class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  // Add handleChange() and submitMessage() methods here
handleChange(event) {
  this.setState({
    input: event.target.value,
    messages: this.state.messages
  })
}

submitMessage(){
    this.setState({
      input: '',
      messages: [...this.state.messages, this.state.input]
    })
  }


  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        { /* Render an input, button, and ul below this line */ }
    <input onChange={this.handleChange.bind(this)} value={this.state.input}/>
    <button onClick={this.submitMessage.bind(this)}>Submit</button>
      <ul> 
          {this.state.messages.map((x, i)=>{
            return <li key={i}>{x}</li>
          })}
      </ul>
        { /* Change code above this line */ }
      </div>
    );
  }
};

*********************************************

3.Extract State Logic to Redux

Now that you finished the React component, you need to move the logic it's performing locally in its state into Redux. 
This is the first step to connect the simple React app to Redux. The only functionality your app has is to add new messages from the user to an unordered list. 
The example is simple in order to demonstrate how React and Redux work together.



my answer(code):

// Define ADD, addMessage(), messageReducer(), and store here:
const ADD = 'ADD';

const addMessage = (message) => ({
  type: 'ADD',
  message : message,
});

const messageReducer = (initialState = [], action) => {
    switch(action.type) {
    case 'ADD':
    return [...initialState, action.message];
    break
    default: 
    return initialState;
    }
};

const store = Redux.createStore(messageReducer);



















