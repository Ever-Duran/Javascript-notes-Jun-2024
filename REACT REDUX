01. Getting Started with React Redux

In a React Redux app, you create a single Redux store that manages the state of your entire app. 
Your React components subscribe to only the pieces of data in the store that are relevant to their role. 
Then, you dispatch actions directly from React components, which then trigger store updates



my answer(code):
class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  
  // Change code above this line
  render() {
    return <div />
  }
};


*****************************************

02. Manage State Locally First

Here you will finish creating the DisplayMessages component.

my answer(code):
class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  // Add handleChange() and submitMessage() methods here
handleChange(event) {
  this.setState({
    input: event.target.value,
    messages: this.state.messages
  })
}

submitMessage(){
    this.setState({
      input: '',
      messages: [...this.state.messages, this.state.input]
    })
  }


  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        { /* Render an input, button, and ul below this line */ }
    <input onChange={this.handleChange.bind(this)} value={this.state.input}/>
    <button onClick={this.submitMessage.bind(this)}>Submit</button>
      <ul> 
          {this.state.messages.map((x, i)=>{
            return <li key={i}>{x}</li>
          })}
      </ul>
        { /* Change code above this line */ }
      </div>
    );
  }
};

*********************************************

3.Extract State Logic to Redux

Now that you finished the React component, you need to move the logic it's performing locally in its state into Redux. 
This is the first step to connect the simple React app to Redux. The only functionality your app has is to add new messages from the user to an unordered list. 
The example is simple in order to demonstrate how React and Redux work together.



my answer(code):

// Define ADD, addMessage(), messageReducer(), and store here:
const ADD = 'ADD';

const addMessage = (message) => ({
  type: 'ADD',
  message : message,
});

const messageReducer = (initialState = [], action) => {
    switch(action.type) {
    case 'ADD':
    return [...initialState, action.message];
    break
    default: 
    return initialState;
    }
};

const store = Redux.createStore(messageReducer);

*******************************************************

04. Use Provider to Connect Redux to React

The next step is to provide React access to the Redux store and the actions it needs to dispatch updates. 
React Redux provides its react-redux package to help accomplish these tasks.



// Redux:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};



const store = Redux.createStore(messageReducer);

// React:

class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {  
    this.setState((state) => {
      const currentMessage = state.input;
      return {
        input: '',
        messages: state.messages.concat(currentMessage)
      };
    });
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.state.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};

const Provider = ReactRedux.Provider;

class AppWrapper extends React.Component {
  // Render the Provider below this line
    render() {
  return <Provider store={store}>
  <DisplayMessages/>
  </Provider>
  }
  // Change code above this line
};


************************************************

5. Map State to Props

The Provider component allows you to provide state and dispatch to your React components, but you must specify exactly what state and actions you want. 
This way, you make sure that each component only has access to the state it needs. 
You accomplish this by creating two functions: mapStateToProps() and mapDispatchToProps().

In these functions, you declare what pieces of state you want to have access to and which action creators you need to be able to dispatch. 
Once these functions are in place, you'll see how to use the React Redux connect method to connect them to your components in another challenge.
Note: Behind the scenes, React Redux uses the store.subscribe() method to implement mapStateToProps().




const state = [];

// Change code below this line

const mapStateToProps = (state) => {
  return  {
    messages : state
  }

};

***********************************************

6. Map Dispatch to Props



















































