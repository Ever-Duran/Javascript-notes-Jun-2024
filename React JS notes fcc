Create a Simple JSX Element

React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.
*because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX.
//{ 'this is treated as JavaScript code' }


*It's worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById('root'))


*****
Create a Complex JSX Element
example:

Valid JSX:

<div>
  <p>Paragraph One</p>
  <p>Paragraph Two</p>
  <p>Paragraph Three</p>
</div>
Invalid JSX:

<p>Paragraph One</p>
<p>Paragraph Two</p>
<p>Paragraph Three</p>


******
Define a new constant JSX that renders a div which contains the following elements in order:

When you have a lot of elements you can wrap them up using (); it's optional though.
const JSX = <div>
    <h1></h1>
    <p></p>
    <ul>
      <li></li>
      <li></li>
      <li></li>

    </ul>
</div>;

******

Add Comments in JSX


To add comments you use : {/* */}


******
Render HTML Elements to the DOM

ReactDOM offers a simple method to render React elements to the DOM which looks like this: ReactDOM.render(componentToRender, targetNode)
where the first argument is the React element or component that you want to render, 
and the second argument is the DOM node that you want to render the component to.

My answer (code) : 
const JSX = (
  <div>
    <h1>Hello World</h1>
    <p>Lets render this to the DOM</p>
  </div>
);
// Add your code below this line
ReactDOM.render(JSX, document.getElementById("challenge-node"));

******
Define an HTML Class in JSX

Naming changes for JSX for class, for example, so we should use nameClass instead. 
A click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange.

Apply a class of myDiv to the div provided in the JSX code.
const JSX = (
  <div className = "myDiv">
    <h1>Add a class to this div</h1>
  </div>
);


const ChildComponent = () => {
  return (
    <div>
      <p>I am the child</p>
    </div>
  );
};

class ParentComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>I am the parent</h1>
        { /* Change code below this line */ }
          <ChildComponent />
        

        { /* Change code above this line */ }
      </div>
    );
  }
};

******
Use React to Render Nested Components

my code (answer)

const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* Change code below this line */ }
      <TypesOfFruit />
      { /* Change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
        <Fruits />
        { /* Change code above this line */ }
      </div>
    );
  }
};


******

Compose React Components
my answer:

class Fruits extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h2>Fruits:</h2>
        { /* Change code below this line */ }
          <NonCitrus />
          <Citrus />
        { /* Change code above this line */ }
      </div>
    );
  }
};

class TypesOfFood extends React.Component {
  constructor(props) {
     super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
          <Fruits />

        { /* Change code above this line */ }
        <Vegetables />
      </div>
    );
  }
};

******
Render a Class Component to the DOM

React components are passed into ReactDOM.render() a little differently than JSX elements.
For JSX elements, you pass in the name of the element that you want to render. 
However, for React components, you need to use the same syntax as if you were rendering a nested component, 
for example ReactDOM.render(<ComponentToRender />, targetNode). 
You use this syntax for both ES6 class components and functional components.

my answer : 
class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        {/* Change code below this line */}
    <Fruits />
    <Vegetables />
        {/* Change code above this line */}
      </div>
    );
  }
};

// Change code below this line
ReactDOM.render(<TypesOfFood />, document.getElementById("challenge-node"));


********
Write a React Component from Scratch

// Change code below this line
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
    <div> 
      <h1>My First React Component!</h1>
    </div>
    )
  }
};

ReactDOM.render(<MyComponent />, document.getElementById("challenge-node"));


******
Pass Props to a Stateless Functional Component

it's time to look at another feature very common in React: props. 
In React, you can pass props, or properties, to child components. 
Say you have an App component which renders a child component called Welcome which is a stateless functional component. 
You can pass Welcome a user property by writing:

<App>
  <Welcome user='Mark' />
</App>

In this case, the created property user is passed to the component Welcome. Since Welcome is a stateless functional component, it has access to this value like so:


const Welcome = (props) => <h1>Hello, {props.user}!</h1>


It is standard to call this value props and when dealing with stateless functional components, 
you basically consider it as an argument to a function which returns JSX. 
You can access the value of the argument in the function body. With class components, you will see this is a little different.

my answer : 
const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
   <p>The current date is: {props.date}!</p>
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date = {Date()} />
        
        { /* Change code above this line */ }
      </div>
    );
  }
};


******









my answer(code):

const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
   <p>The current date is: {props.date}!</p>
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date = {Date()} />
        
        { /* Change code above this line */ }
      </div>
    );
  }
};

**************************
Pass an Array as Props

To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.

<ParentComponent>
  <ChildComponent colors={["green", "blue", "red"]} />
</ParentComponent>
The child component then has access to the array property colors. 
Array methods such as join() can be used when accessing the property.

const ChildComponent = (props) => <p>{props.colors.join(', ')}</p>
This will join all colors array items into a comma separated string and produce: <p>green, blue, red</p>. 
Later, we will learn about other common methods to render arrays of data in React.










const List = (props) => {
  { /* Change code below this line */ }
  return (
   <p>{props.tasks.join(', ')}</p>
  )
  { /* Change code above this line */ }
};

class ToDo extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>To Do Lists</h1>
        <h2>Today</h2>
        { /* Change code below this line */ }
        <List tasks = {["walk dog", "workout", "take a shower"]} />
        <h2>Tomorrow</h2>
        <List tasks = {["play the guitar", "work", "read a book"]} />
     { /* Change code above this line */ }
      </div>
    );
  }
};




