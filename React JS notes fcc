Create a Simple JSX Element

React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.
*because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX.
//{ 'this is treated as JavaScript code' }


*It's worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById('root'))


*****
04. Create a Complex JSX Element
example:

Valid JSX:

<div>
  <p>Paragraph One</p>
  <p>Paragraph Two</p>
  <p>Paragraph Three</p>
</div>
Invalid JSX:

<p>Paragraph One</p>
<p>Paragraph Two</p>
<p>Paragraph Three</p>


******
05. Define a new constant JSX that renders a div which contains the following elements in order:

When you have a lot of elements you can wrap them up using (); it's optional though.
const JSX = <div>
    <h1></h1>
    <p></p>
    <ul>
      <li></li>
      <li></li>
      <li></li>

    </ul>
</div>;

******
06.
Add Comments in JSX


To add comments you use : {/* */}


******
07. Render HTML Elements to the DOM

ReactDOM offers a simple method to render React elements to the DOM which looks like this: ReactDOM.render(componentToRender, targetNode)
where the first argument is the React element or component that you want to render, 
and the second argument is the DOM node that you want to render the component to.

My answer (code) : 
const JSX = (
  <div>
    <h1>Hello World</h1>
    <p>Lets render this to the DOM</p>
  </div>
);
// Add your code below this line
ReactDOM.render(JSX, document.getElementById("challenge-node"));

******
08. Define an HTML Class in JSX

Naming changes for JSX for class, for example, so we should use nameClass instead. 
A click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange.

Apply a class of myDiv to the div provided in the JSX code.
const JSX = (
  <div className = "myDiv">
    <h1>Add a class to this div</h1>
  </div>
);


const ChildComponent = () => {
  return (
    <div>
      <p>I am the child</p>
    </div>
  );
};

class ParentComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>I am the parent</h1>
        { /* Change code below this line */ }
          <ChildComponent />
        

        { /* Change code above this line */ }
      </div>
    );
  }
};

******
09. Use React to Render Nested Components

my code (answer)

const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* Change code below this line */ }
      <TypesOfFruit />
      { /* Change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
        <Fruits />
        { /* Change code above this line */ }
      </div>
    );
  }
};


******
10. Compose React Components
my answer:

class Fruits extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h2>Fruits:</h2>
        { /* Change code below this line */ }
          <NonCitrus />
          <Citrus />
        { /* Change code above this line */ }
      </div>
    );
  }
};

class TypesOfFood extends React.Component {
  constructor(props) {
     super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
          <Fruits />

        { /* Change code above this line */ }
        <Vegetables />
      </div>
    );
  }
};

******
11. Render a Class Component to the DOM

React components are passed into ReactDOM.render() a little differently than JSX elements.
For JSX elements, you pass in the name of the element that you want to render. 
However, for React components, you need to use the same syntax as if you were rendering a nested component, 
for example ReactDOM.render(<ComponentToRender />, targetNode). 
You use this syntax for both ES6 class components and functional components.

my answer : 
class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        {/* Change code below this line */}
    <Fruits />
    <Vegetables />
        {/* Change code above this line */}
      </div>
    );
  }
};

// Change code below this line
ReactDOM.render(<TypesOfFood />, document.getElementById("challenge-node"));


********
12. Write a React Component from Scratch

// Change code below this line
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
    <div> 
      <h1>My First React Component!</h1>
    </div>
    )
  }
};

ReactDOM.render(<MyComponent />, document.getElementById("challenge-node"));


******
13. Pass Props to a Stateless Functional Component

it's time to look at another feature very common in React: props. 
In React, you can pass props, or properties, to child components. 
Say you have an App component which renders a child component called Welcome which is a stateless functional component. 
You can pass Welcome a user property by writing:

<App>
  <Welcome user='Mark' />
</App>

In this case, the created property user is passed to the component Welcome. Since Welcome is a stateless functional component, it has access to this value like so:


const Welcome = (props) => <h1>Hello, {props.user}!</h1>


It is standard to call this value props and when dealing with stateless functional components, 
you basically consider it as an argument to a function which returns JSX. 
You can access the value of the argument in the function body. With class components, you will see this is a little different.

my answer : 
const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
   <p>The current date is: {props.date}!</p>
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date = {Date()} />
        
        { /* Change code above this line */ }
      </div>
    );
  }
};


******


14.






my answer(code):

const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
   <p>The current date is: {props.date}!</p>
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date = {Date()} />
        
        { /* Change code above this line */ }
      </div>
    );
  }
};

**************************
15. Pass an Array as Props

To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.

<ParentComponent>
  <ChildComponent colors={["green", "blue", "red"]} />
</ParentComponent>
The child component then has access to the array property colors. 
Array methods such as join() can be used when accessing the property.

const ChildComponent = (props) => <p>{props.colors.join(', ')}</p>
This will join all colors array items into a comma separated string and produce: <p>green, blue, red</p>. 
Later, we will learn about other common methods to render arrays of data in React.










const List = (props) => {
  { /* Change code below this line */ }
  return (
   <p>{props.tasks.join(', ')}</p>
  )
  { /* Change code above this line */ }
};

class ToDo extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>To Do Lists</h1>
        <h2>Today</h2>
        { /* Change code below this line */ }
        <List tasks = {["walk dog", "workout", "take a shower"]} />
        <h2>Tomorrow</h2>
        <List tasks = {["play the guitar", "work", "read a book"]} />
     { /* Change code above this line */ }
      </div>
    );
  }
};


*******
16. 
You can use this to add a default value to props.
MyComponent.defaultProps = { location: 'San Francisco' }

you have defined a location prop that's set to the string San Francisco, unless you specify otherwise. 
React assigns default props if props are undefined, but if you pass null as the value for a prop, it will remain null.

My answer (code): 
const ShoppingCart = (props) => {
  return (
    <div>
      <h1>Shopping Cart Component</h1>
    </div>
  )
};
// Change code below this line
ShoppingCart.defaultProps = {
  items : 0
}


*****
17. 
The ability to set default props is a useful feature in React. 
The way to override the default props is to explicitly set the prop values for a component.



My answer (code) :
const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
}

Items.defaultProps = {
  quantity: 0
}

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    { /* Change code below this line */ }
    return <Items quantity = { 10 }/>
    
    { /* Change code above this line */ }
  }
};


******
18. Use PropTypes to Define the Props You Expect


You can set propTypes on your component to require the data to be of type array. 
This will throw a useful warning when the data is of any other type.



my answer(code):

const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
};

// Change code below this line
Items.propTypes = {quantity : PropTypes.number.isRequired}
// Change code above this line

Items.defaultProps = {
  quantity: 0
};

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <Items />
  }
};


********************************
19. 

Anytime you refer to a class component within itself, you use the this keyword. 
To access props within a class component, you preface the code that you use to access it with this. 
For example, if an ES6 class component has a prop called data, you write {this.props.data} in JSX.


My answer : 

class App extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
            { /* Change code below this line */ }
            <Welcome name = "Bob" />
            { /* Change code above this line */ }
        </div>
    );
  }
};

class Welcome extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
          { /* Change code below this line */ }
          <p>Hello, <strong>{this.props.name}</strong>!</p>
          { /* Change code above this line */ }
        </div>
    );
  }
};


*****************************
*****************************
20. A stateless functional component is any function you write which accepts props and returns JSX.

Try to minimize statefulness and to create stateless functional components wherever possible. 
This helps contain your state management to a specific area of your application. 
In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.




my answer(code): 

class CampSite extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Camper name = "Daisy"/>
      </div>
    );
  }
};
// Change code below this line

const Camper = (props) => {
  return <p>{props.name}</p>
    
  Camper.propTypes = { name : PropTypes.string. isRequired}

  Camper.defaultProps = {
  name: "CamperBot"
}
};

***********************
The state property must be set to a JavaScript object. Declaring it looks like this:

this.state = {

}



my answer(code):

class StatefulComponent extends React.Component {
  constructor(props) {
    super(props);
    // Only change code below this line
    this.state = {
      firstName : "Daisy",
    }
    // Only change code above this line
  }
  render() {
    return (
      <div>
        <h1>{this.state.firstName}</h1>
      </div>
    );
  }
};

*********
21. 

If you want to access a state value within the return of the render method, you have to enclose the value in curly braces.
The state could access in a Component locally.


my answer(code):

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
        <h1>{this.state.name}</h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};

****************************
22. Render State in the User Interface Another Way

There's another way to access a state in a component. You can do it on the render() before the return.




My answer(code):
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    // Change code below this line
  const name = this.state.name;
    // Change code above this line
    return (
      <div>
        { /* Change code below this line */ }
          <h1>{name}</h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};


**********
23. Set State with this.setState

setState is a method that allows you to change the state. This is the way you call the setState method in a component: this.setState().


this.setState({
  username: 'Lewis'
});


my answer(code): 
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Initial State'
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    // Change code below this line
        this.setState({
          name : "React Rocks!"
        })
    // Change code above this line
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Click Me</button>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};

***************************

24. Bind 'this' to a Class Method 
my answer(code):

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: "Hello"
    };
    // Change code below this line
    this.handleClick = this.handleClick.bind(this);
    // Change code above this line
  }
  handleClick() {
    this.setState({
      text: "You clicked!"
    });
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
        <button onClick = {this.handleClick}>Click Me</button>
        { /* Change code above this line */ }
        <h1>{this.state.text}</h1>
      </div>
    );
  }
};


******************************

25 Use State to Toggle an Element

Sometimes you might need to know the previous state when updating the state. 
However, state updates may be asynchronous - this means React may batch multiple setState() calls into a single update. 
This means you can't rely on the previous value of this.state or this.props when calculating the next value. So, you should not use code like this:

this.setState({
  counter: this.state.counter + this.props.increment
});

Instead, you should pass setState a function that allows you to access state and props. 
Using a function with setState guarantees you are working with the most current values of state and props. 
This means that the above should be rewritten as:

this.setState((state, props) => ({
  counter: state.counter + props.increment
}));
You can also use a form without props if you need only the state:

this.setState(state => ({
  counter: state.counter + 1
}));
Note that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it's a block of code.



my answer (code) :
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      visibility: false
    };
    // Change code below this line
  this.toggleVisibility = this.toggleVisibility.bind(this);
    // Change code above this line
  }
  // Change code below this line
  toggleVisibility() {
    this.setState(state => {
      if (state.visibility === true) { 
         return { visibility : false };
      } else {
         return { visibility : true };
      }
    });
  }
  // Change code above this line
  render() {
    if (this.state.visibility) {
      return (
        <div>
          <button onClick={this.toggleVisibility}>Click Me</button>
          <h1>Now you see me!</h1>
        </div>
      );
    } else {
      return (
        <div>
          <button onClick={this.toggleVisibility}>Click Me</button>
        </div>
      );
    }
  }
}

*******************

26 Write a Simple Counter

You can design a more complex stateful component by combining the concepts covered so far. 
These include initializing state, writing methods that set state, and assigning click handlers to trigger these methods.

my answer ( code ) :

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
    // Change code below this line
    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
    this.reset = this.reset.bind(this);
    // Change code above this line
  }
  // Change code below this line
    increment() {
        this.setState((state) => ({
          count: state.count + 1,
        }));
    }

    decrement() {
        this.setState((state) => ({
          count: state.count - 1,
        }));
    };

    reset() {
         this.setState(() => ({
           count: 0,
         }));
    };
  // Change code above this line
  render() {
    return (
      <div>
        <button className='inc' onClick={this.increment}>Increment!</button>
        <button className='dec' onClick={this.decrement}>Decrement!</button>
        <button className='reset' onClick={this.reset}>Reset</button>
        <h1>Current Count: {this.state.count}</h1>
      </div>
    );
  }
};



***************************************
28. Create a Controlled Input

Create a Controlled Input
Your application may have more complex interactions between state and the rendered UI. 
For example, form control elements for text input, such as input and textarea, maintain their own state in the DOM as the user types.
With React, you can move this mutable state into a React component's state. 
The user's input becomes part of the application state, so React controls the value of that input field. 
Typically, if you have React components with input fields the user can type into, it will be a controlled input form.







class ControlledInput extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    };
    // Change code below this line
  this.handleChange = this.handleChange.bind(this);
      
    // Change code above this line
  }
  // Change code below this line
      handleChange(event) {
          this.setState({
          input: event.target.value
        });
      }
  // Change code above this line
  render() {
    return (
      <div>
        { /* Change code below this line */}
        <input value = {this.state.input} onChange = {this.handleChange} />
        { /* Change code above this line */}
        <h4>Controlled Input:</h4>
        <p>{this.state.input}</p>
      </div>
    );
  }
};

-****************************
29. Create a Controlled Form

The last challenge showed that React can control the internal state for certain 
elements like input and textarea, 
which makes them controlled components. 
This applies to other form elements as well, including the regular HTML form element..





class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      submit: ''
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  handleSubmit(event) {
    event.preventDefault()
    this.setState({
      submit: this.state.input
    });
  }
  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}>
          <input
            value={this.state.input}
            onChange={this.handleChange} />
          <button type='submit'>Submit!</button>
        </form>
        <h1>{this.state.submit}</h1>
      </div>
    );
  }
};



**************************
29. Pass State as Props to Child Components

Pass State as Props to Child Components


class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'CamperBot'
    }
  }
  render() {
    return (
       <div>
         {/* Change code below this line */}
         <Navbar name={this.state.name} />
         {/* Change code above this line */}
       </div>
    );
  }
};

class Navbar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
    <div>
      {/* Change code below this line */}
      <h1>Hello, my name is: {this.props.name}</h1>
      {/* Change code above this line */}
    </div>
    );
  }
};


***********************
30. Pass a Callback as Props


You can pass state as props to child components, but you're not limited to passing data. 
You can also pass handler functions or any method that's defined on a React component to a child component. 
This is how you allow child components to interact with their parent components. 
You pass methods to a child just like a regular prop. It's assigned a name and you have access to that method name under this.props in the child component.



class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      inputValue: ''
    }
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange(event) {
    this.setState({
      inputValue: event.target.value
    });
  }
  render() {
    return (
       <div>
        { /* Change code below this line */ }
      <GetInput inputValue ={this.state.input} handleChange = {this.handleChange}/>
        
    
      <RenderInput input ={this.state.inputValue}/>
        { /* Change code above this line */ }
       </div>
    );
  }
};

class GetInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Get Input:</h3>
        <input
          value={this.props.input}
          onChange={this.props.handleChange}/>
      </div>
    );
  }
};

class RenderInput extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>Input Render:</h3>
        <p>{this.props.input}</p>
      </div>
    );
  }
};



**********************************

31. Use the Lifecycle Method componentWillMount

In react there are several methods that provide opportunities to perform actions at specific points in the lifecycle of a component.
This can be done right before they are rendered, before they update, before they receive props, before they unmount, and so on.



my code (answer):
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  componentWillMount() {
    // Change code below this line
      
      console.log("MyComponent");
    // Change code above this line
  }
  render() {
    return <div />
  }
};


************************
32. Use the Lifecycle Method componentDidMount

place API calls or any calls to your server in the lifecycle method componentDidMount()


class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeUsers: null
    };
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({
        activeUsers: 1273
      });
    }, 2500);
  }
  render() {
    return (
      <div>
        {/* Change code below this line */}
        <h1>Active Users: {this.state.activeUsers}</h1>
        {/* Change code above this line */}
      </div>
    );
  }
}

******************************
33. Add Event Listeners
The componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality. 
React provides a synthetic event system which wraps the native event system present in browsers. 
This means that the synthetic event system behaves exactly the same regardless of the user's browser - 
even if the native events may behave differently between different browsers.



my answer (code):
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  // Change code below this line
  componentDidMount() {
    document.addEventListener("keydown", this.handleKeyPress);
  }
  componentWillUnmount() {
     document.removeEventListener("keydown", this.handleKeyPress);
  }
  // Change code above this line
  handleEnter() {
    this.setState((state) => ({
      message: state.message + 'You pressed the enter key! '
    }));
  }
  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};



****************************
34. Optimize Re-Renders with shouldComponentUpdate

Usually, whenever you update a component it also updates the chil.
There's a method that allows you to update a component or not.
The method is shouldComponentUpdate(), and it takes nextProps and nextState as parameters.

 You can compare the current props (this.props) to the next props (nextProps) 
to determine if you need to update or not, and return true or false accordingly.


my answer(code):
class OnlyEvens extends React.Component {
  constructor(props) {
    super(props);
  }
  shouldComponentUpdate(nextProps, nextState) {
    console.log('Should I update?');
    // Change code below this line
    if (nextProps.value % 2 === 0) {
    return true;
    } 
    // Change code above this line
  }
  componentDidUpdate() {
    console.log('Component re-rendered.');
  }
  render() {
    return <h1>{this.props.value}</h1>;
  }
}

class Controller extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 0
    };
    this.addValue = this.addValue.bind(this);
  }
  addValue() {
    this.setState(state => ({
      value: state.value + 1
    }));
  }
  render() {
    return (
      <div>
        <button onClick={this.addValue}>Add</button>
        <OnlyEvens value={this.state.value} />
      </div>
    );
  }
}


************************************
35. Introducing Inline Styles



my answer(code):

class Colorful extends React.Component {
  render() {
    return (
      <div style={{color : "red", fontSize : "72px"}}>Big Red</div>
    );
  }
};


************************************

36. Add Inline Styles in React

If you have a large set of styles, you can assign a style object to a constant to keep your code organized. 


my code (answer) :

const styles = {
        color: "purple",
        fontSize: "40",
        border: "2px solid purple",
      }
    
    // Change code above this line
class Colorful extends React.Component {
  render() {
    // Change code below this line
    return (
      
      <div style={styles}>Style Me!</div>
    );
    // Change code above this line
  }
};

*******************************

37. Use Advanced JavaScript in React Render Method

You can also write JavaScript directly in your render methods, before the return statement, without inserting it inside of curly braces. 
This is because it is not yet within the JSX code. When you want to use a variable later in the JSX code inside the return statement, 
you place the variable name inside curly braces.



my code ( answer):

const inputStyle = {
  width: 235,
  margin: 5
};

class MagicEightBall extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      userInput: '',
      randomIndex: ''
    };
    this.ask = this.ask.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }
  ask() {
    if (this.state.userInput) {
      this.setState({
        randomIndex: Math.floor(Math.random() * 20),
        userInput: ''
      });
    }
  }
  handleChange(event) {
    this.setState({
      userInput: event.target.value
    });
  }
  render() {
    const possibleAnswers = [
      'It is certain',
      'It is decidedly so',
      'Without a doubt',
      'Yes, definitely',
      'You may rely on it',
      'As I see it, yes',
      'Outlook good',
      'Yes',
      'Signs point to yes',
      'Reply hazy try again',
      'Ask again later',
      'Better not tell you now',
      'Cannot predict now',
      'Concentrate and ask again',
      "Don't count on it",
      'My reply is no',
      'My sources say no',
      'Most likely',
      'Outlook not so good',
      'Very doubtful'
    ];
    const answer = possibleAnswers[this.state.randomIndex]; // Change this line
    return (
      <div>
        <input
          type='text'
          value={this.state.userInput}
          onChange={this.handleChange}
          style={inputStyle}
        />
        <br />
        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>
        <br />
        <h3>Answer:</h3>
        <p>
          {/* Change code below this line */}
              {answer}
          {/* Change code above this line */}
        </p>
      </div>
    );
  }
}

*********************************************

38. Render with an If-Else Condition

Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. 
When the condition is true, one view renders. 
When it's false, it's a different view. You can do this with a standard if/else statement in the render() method of a React component.


my code (answer):
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: true
    }
    this.toggleDisplay = this.toggleDisplay.bind(this);
  }
  toggleDisplay() {
    this.setState((state) => ({
      display: !state.display
    }));
  }
  render() {
    // Change code below this line
  if (this.state.display){
    return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
         <h1>Displayed!</h1>
       </div>
    );
   } else { 
     return (
        <div>
      <button onClick={this.toggleDisplay}>Toggle Display</button>
        </div>
     )
    }
  }
};


********************************************

39. Use && for a More Concise Conditional


you can use the && logical operator to perform conditional logic in a more concise way. 
This is possible because you want to check if a condition is true, and if it is, return some markup. Here's an example:
{condition && <p>markup</p>}

my answer (code):
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: true
    }
    this.toggleDisplay = this.toggleDisplay.bind(this);
  }
  toggleDisplay() {
    this.setState(state => ({
      display: !state.display
    }));
  }
  render() {
    // Change code below this line
    return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
        {this.state.display && <h1>Displayed!</h1>}
       </div>
    );
  }
};











