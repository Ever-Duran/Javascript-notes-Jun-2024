Create a Simple JSX Element

React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.
*because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX.
//{ 'this is treated as JavaScript code' }


*It's worth noting that under the hood the challenges are calling ReactDOM.render(JSX, document.getElementById('root'))


*****
04. Create a Complex JSX Element
example:

Valid JSX:

<div>
  <p>Paragraph One</p>
  <p>Paragraph Two</p>
  <p>Paragraph Three</p>
</div>
Invalid JSX:

<p>Paragraph One</p>
<p>Paragraph Two</p>
<p>Paragraph Three</p>


******
05. Define a new constant JSX that renders a div which contains the following elements in order:

When you have a lot of elements you can wrap them up using (); it's optional though.
const JSX = <div>
    <h1></h1>
    <p></p>
    <ul>
      <li></li>
      <li></li>
      <li></li>

    </ul>
</div>;

******
06.
Add Comments in JSX


To add comments you use : {/* */}


******
07. Render HTML Elements to the DOM

ReactDOM offers a simple method to render React elements to the DOM which looks like this: ReactDOM.render(componentToRender, targetNode)
where the first argument is the React element or component that you want to render, 
and the second argument is the DOM node that you want to render the component to.

My answer (code) : 
const JSX = (
  <div>
    <h1>Hello World</h1>
    <p>Lets render this to the DOM</p>
  </div>
);
// Add your code below this line
ReactDOM.render(JSX, document.getElementById("challenge-node"));

******
08. Define an HTML Class in JSX

Naming changes for JSX for class, for example, so we should use nameClass instead. 
A click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange.

Apply a class of myDiv to the div provided in the JSX code.
const JSX = (
  <div className = "myDiv">
    <h1>Add a class to this div</h1>
  </div>
);


const ChildComponent = () => {
  return (
    <div>
      <p>I am the child</p>
    </div>
  );
};

class ParentComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>I am the parent</h1>
        { /* Change code below this line */ }
          <ChildComponent />
        

        { /* Change code above this line */ }
      </div>
    );
  }
};

******
09. Use React to Render Nested Components

my code (answer)

const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* Change code below this line */ }
      <TypesOfFruit />
      { /* Change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
        <Fruits />
        { /* Change code above this line */ }
      </div>
    );
  }
};


******
10. Compose React Components
my answer:

class Fruits extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h2>Fruits:</h2>
        { /* Change code below this line */ }
          <NonCitrus />
          <Citrus />
        { /* Change code above this line */ }
      </div>
    );
  }
};

class TypesOfFood extends React.Component {
  constructor(props) {
     super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
          <Fruits />

        { /* Change code above this line */ }
        <Vegetables />
      </div>
    );
  }
};

******
11. Render a Class Component to the DOM

React components are passed into ReactDOM.render() a little differently than JSX elements.
For JSX elements, you pass in the name of the element that you want to render. 
However, for React components, you need to use the same syntax as if you were rendering a nested component, 
for example ReactDOM.render(<ComponentToRender />, targetNode). 
You use this syntax for both ES6 class components and functional components.

my answer : 
class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        {/* Change code below this line */}
    <Fruits />
    <Vegetables />
        {/* Change code above this line */}
      </div>
    );
  }
};

// Change code below this line
ReactDOM.render(<TypesOfFood />, document.getElementById("challenge-node"));


********
12. Write a React Component from Scratch

// Change code below this line
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
    <div> 
      <h1>My First React Component!</h1>
    </div>
    )
  }
};

ReactDOM.render(<MyComponent />, document.getElementById("challenge-node"));


******
13. Pass Props to a Stateless Functional Component

it's time to look at another feature very common in React: props. 
In React, you can pass props, or properties, to child components. 
Say you have an App component which renders a child component called Welcome which is a stateless functional component. 
You can pass Welcome a user property by writing:

<App>
  <Welcome user='Mark' />
</App>

In this case, the created property user is passed to the component Welcome. Since Welcome is a stateless functional component, it has access to this value like so:


const Welcome = (props) => <h1>Hello, {props.user}!</h1>


It is standard to call this value props and when dealing with stateless functional components, 
you basically consider it as an argument to a function which returns JSX. 
You can access the value of the argument in the function body. With class components, you will see this is a little different.

my answer : 
const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
   <p>The current date is: {props.date}!</p>
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date = {Date()} />
        
        { /* Change code above this line */ }
      </div>
    );
  }
};


******


14.






my answer(code):

const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
   <p>The current date is: {props.date}!</p>
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date = {Date()} />
        
        { /* Change code above this line */ }
      </div>
    );
  }
};

**************************
15. Pass an Array as Props

To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.

<ParentComponent>
  <ChildComponent colors={["green", "blue", "red"]} />
</ParentComponent>
The child component then has access to the array property colors. 
Array methods such as join() can be used when accessing the property.

const ChildComponent = (props) => <p>{props.colors.join(', ')}</p>
This will join all colors array items into a comma separated string and produce: <p>green, blue, red</p>. 
Later, we will learn about other common methods to render arrays of data in React.










const List = (props) => {
  { /* Change code below this line */ }
  return (
   <p>{props.tasks.join(', ')}</p>
  )
  { /* Change code above this line */ }
};

class ToDo extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>To Do Lists</h1>
        <h2>Today</h2>
        { /* Change code below this line */ }
        <List tasks = {["walk dog", "workout", "take a shower"]} />
        <h2>Tomorrow</h2>
        <List tasks = {["play the guitar", "work", "read a book"]} />
     { /* Change code above this line */ }
      </div>
    );
  }
};


*******
16. 
You can use this to add a default value to props.
MyComponent.defaultProps = { location: 'San Francisco' }

you have defined a location prop that's set to the string San Francisco, unless you specify otherwise. 
React assigns default props if props are undefined, but if you pass null as the value for a prop, it will remain null.

My answer (code): 
const ShoppingCart = (props) => {
  return (
    <div>
      <h1>Shopping Cart Component</h1>
    </div>
  )
};
// Change code below this line
ShoppingCart.defaultProps = {
  items : 0
}


*****
17. 
The ability to set default props is a useful feature in React. 
The way to override the default props is to explicitly set the prop values for a component.



My answer (code) :
const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
}

Items.defaultProps = {
  quantity: 0
}

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    { /* Change code below this line */ }
    return <Items quantity = { 10 }/>
    
    { /* Change code above this line */ }
  }
};


******
18. Use PropTypes to Define the Props You Expect


You can set propTypes on your component to require the data to be of type array. 
This will throw a useful warning when the data is of any other type.



my answer(code):

const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
};

// Change code below this line
Items.propTypes = {quantity : PropTypes.number.isRequired}
// Change code above this line

Items.defaultProps = {
  quantity: 0
};

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <Items />
  }
};


********************************
19. 

Anytime you refer to a class component within itself, you use the this keyword. 
To access props within a class component, you preface the code that you use to access it with this. 
For example, if an ES6 class component has a prop called data, you write {this.props.data} in JSX.


My answer : 

class App extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
            { /* Change code below this line */ }
            <Welcome name = "Bob" />
            { /* Change code above this line */ }
        </div>
    );
  }
};

class Welcome extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
          { /* Change code below this line */ }
          <p>Hello, <strong>{this.props.name}</strong>!</p>
          { /* Change code above this line */ }
        </div>
    );
  }
};


*****************************
*****************************
20. A stateless functional component is any function you write which accepts props and returns JSX.

Try to minimize statefulness and to create stateless functional components wherever possible. 
This helps contain your state management to a specific area of your application. 
In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.




my answer(code): 

class CampSite extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Camper name = "Daisy"/>
      </div>
    );
  }
};
// Change code below this line

const Camper = (props) => {
  return <p>{props.name}</p>
    
  Camper.propTypes = { name : PropTypes.string. isRequired}

  Camper.defaultProps = {
  name: "CamperBot"
}
};

***********************
The state property must be set to a JavaScript object. Declaring it looks like this:

this.state = {

}



my answer(code):

class StatefulComponent extends React.Component {
  constructor(props) {
    super(props);
    // Only change code below this line
    this.state = {
      firstName : "Daisy",
    }
    // Only change code above this line
  }
  render() {
    return (
      <div>
        <h1>{this.state.firstName}</h1>
      </div>
    );
  }
};

*********
21. 

If you want to access a state value within the return of the render method, you have to enclose the value in curly braces.
The state could access in a Component locally.


my answer(code):

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
        <h1>{this.state.name}</h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};

****************************
22. Render State in the User Interface Another Way

There's another way to access a state in a component. You can do it on the render() before the return.




My answer(code):
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    // Change code below this line
  const name = this.state.name;
    // Change code above this line
    return (
      <div>
        { /* Change code below this line */ }
          <h1>{name}</h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};


**********
23. Set State with this.setState

setState is a method that allows you to change the state. This is the way you call the setState method in a component: this.setState().


this.setState({
  username: 'Lewis'
});


my answer(code): 
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Initial State'
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    // Change code below this line
        this.setState({
          name : "React Rocks!"
        })
    // Change code above this line
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Click Me</button>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};

***************************

Bind 'this' to a Class Method

my answer(code):

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: "Hello"
    };
    // Change code below this line
    this.handleClick = this.handleClick.bind(this);
    // Change code above this line
  }
  handleClick() {
    this.setState({
      text: "You clicked!"
    });
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
        <button onClick = {this.handleClick}>Click Me</button>
        { /* Change code above this line */ }
        <h1>{this.state.text}</h1>
      </div>
    );
  }
};












