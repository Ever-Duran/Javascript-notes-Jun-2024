Sass uses variables just like JS.
Variables are declared with $

E.g: 
$main-fonts: Arial, sans-serif;
$headings-color: green;

Then, we use the variables : 
h1 {
  font-family: $main-fonts;
  color: $headings-color;
}

My code (answer):
$text-color : red;
  .blog-spot, h2 {
  color : $text-color;
  }

*****

For large projects, CSS allows you to organize your code putting it in child style rules.

article {
  height: 200px;

  p {
    color: white;
  }

  ul {
    color: blue;
  }
}

My code (answer):
<style type='text/scss'>
  .blog-post {
    h1 {
    text-align: center;
    color: blue;
  }
  p {
    font-size: 20px;
  }
}
  
</style>

*****

Create Reusable CSS with Mixins

A mixin is a group of CSS declarations that can be reused throughout the style sheet.
Starts with the at-rule and then you add a name.

Mixins also allow you to add two arguments.
E.g.:
@mixin prose($font-size, $spacing) {
  font-size: $font-size;
  margin: 0;
  margin-block-end: $spacing;
}

p {
  @include prose(1.25rem, 1rem);
}

h2 {
  @include prose(2.4rem, 1.5rem);
}

**
You can make arguments optional by giving the parameters default values.

@mixin text-color($color: black) {
  color: $color;
}

p {
  @include text-color(); /* color: black */
}

nav a {
  @include text-color(orange);
}

**

My answer (code): 

****
A mixin is a group of CSS declarations that can be reused throughout the style sheet. 
The definition starts with the @mixin at-rule, followed by a custom name. You apply the mixin using the @include at-rule.

E.g.: 
mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

nav ul {
  @include reset-list;
}

E.g.: adding arguments
@mixin prose($font-size, $spacing) {
  font-size: $font-size;
  margin: 0;
  margin-block-end: $spacing;
}

p {
  @include prose(1.25rem, 1rem);
}

h2 {
  @include prose(2.4rem, 1.5rem);
}

*//
my code(answer):

<style type='text/scss'>
@mixin shape($w, $h, $bg-color) {
  width : $w;
  height : $h;
  background-color: $bg-color;
}

#square {
  @include shape(50px, 50px, red);

}

#rect-a {
  @include shape(100px, 50px, blue);
}

#rect-b {
  @include shape(50px, 100px, orange);
}
</style>

******
@if is used to test a specific case. It works like the javascript if.

e.g.: 
@mixin make-bold($bool) {
  @if $bool == true {
    font-weight: bold;
  }
}

**

else works the same : 
@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}

my code (answer):
@mixin border-stroke($val) {
  @if $val === light {
    border : 1px solid black;
  } @else if $val === medium {
    border : 3px solid black;
  } @else if $val === heavy { 
    border : 6px solid black;
  } @else {
    border : none;
  }
}


*******
@for works similarly to the javascript for

@for is used in two ways: "start through end" or "start to end". 
The main difference is that the "start to end" excludes the end number as part of the count, a
nd "start through end" includes the end number as part of the count.

Here's a start through end example:

@for $i from 1 through 12 {
  .col-#{$i} { width: 100%/12 * $i; }
}

The #{$i} part is the syntax to combine a variable (i) with text to make a string. When the Sass file is converted to CSS, it looks like this:

.col-1 {
  width: 8.33333%;
}

.col-2 {
  width: 16.66667%;
}

...

.col-12 {
  width: 100%;
}


This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.
Write a @for directive that takes a variable $j that goes from 1 to 6.
It should create 5 classes called .text-1 to .text-5 where each has a font-size set to 15px multiplied by the index.

My answer( my code) :

<style type='text/scss'>
  @for $j from 1 to 6 {
    .text-#{$j} {font-size: 15px * $j;}
  }
</style>

*****











