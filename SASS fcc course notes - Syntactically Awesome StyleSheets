Sass uses variables just like JS.
Variables are declared with $

E.g: 
$main-fonts: Arial, sans-serif;
$headings-color: green;

Then, we use the variables : 
h1 {
  font-family: $main-fonts;
  color: $headings-color;
}

My code (answer):
$text-color : red;
  .blog-spot, h2 {
  color : $text-color;
  }

*****

For large projects, CSS allows you to organize your code putting it in child style rules.

article {
  height: 200px;

  p {
    color: white;
  }

  ul {
    color: blue;
  }
}

My code (answer):
<style type='text/scss'>
  .blog-post {
    h1 {
    text-align: center;
    color: blue;
  }
  p {
    font-size: 20px;
  }
}
  
</style>

*****

Create Reusable CSS with Mixins

A mixin is a group of CSS declarations that can be reused throughout the style sheet.
Starts with the at-rule and then you add a name.

Mixins also allow you to add two arguments.
E.g.:
@mixin prose($font-size, $spacing) {
  font-size: $font-size;
  margin: 0;
  margin-block-end: $spacing;
}

p {
  @include prose(1.25rem, 1rem);
}

h2 {
  @include prose(2.4rem, 1.5rem);
}

**
You can make arguments optional by giving the parameters default values.

@mixin text-color($color: black) {
  color: $color;
}

p {
  @include text-color(); /* color: black */
}

nav a {
  @include text-color(orange);
}

**

My answer (code): 

****
A mixin is a group of CSS declarations that can be reused throughout the style sheet. 
The definition starts with the @mixin at-rule, followed by a custom name. You apply the mixin using the @include at-rule.

E.g.: 
mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

nav ul {
  @include reset-list;
}

E.g.: adding arguments
@mixin prose($font-size, $spacing) {
  font-size: $font-size;
  margin: 0;
  margin-block-end: $spacing;
}

p {
  @include prose(1.25rem, 1rem);
}

h2 {
  @include prose(2.4rem, 1.5rem);
}

*//
my code(answer):

<style type='text/scss'>
@mixin shape($w, $h, $bg-color) {
  width : $w;
  height : $h;
  background-color: $bg-color;
}

#square {
  @include shape(50px, 50px, red);

}

#rect-a {
  @include shape(100px, 50px, blue);
}

#rect-b {
  @include shape(50px, 100px, orange);
}
</style>

******
@if is used to test a specific case. It works like the javascript if.

e.g.: 
@mixin make-bold($bool) {
  @if $bool == true {
    font-weight: bold;
  }
}

**

else works the same : 
@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}

my code (answer):
@mixin border-stroke($val) {
  @if $val === light {
    border : 1px solid black;
  } @else if $val === medium {
    border : 3px solid black;
  } @else if $val === heavy { 
    border : 6px solid black;
  } @else {
    border : none;
  }
}


*******
@for works similarly to the javascript for

@for is used in two ways: "start through end" or "start to end". 
The main difference is that the "start to end" excludes the end number as part of the count, a
nd "start through end" includes the end number as part of the count.

Here's a start through end example:

@for $i from 1 through 12 {
  .col-#{$i} { width: 100%/12 * $i; }
}

The #{$i} part is the syntax to combine a variable (i) with text to make a string. When the Sass file is converted to CSS, it looks like this:

.col-1 {
  width: 8.33333%;
}

.col-2 {
  width: 16.66667%;
}

...

.col-12 {
  width: 100%;
}


This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.
Write a @for directive that takes a variable $j that goes from 1 to 6.
It should create 5 classes called .text-1 to .text-5 where each has a font-size set to 15px multiplied by the index.

My answer( my code) :

<style type='text/scss'>
  @for $j from 1 to 6 {
    .text-#{$j} {font-size: 15px * $j;}
  }
</style>

*****
Use @each to Map Over Items in a List

@each $color in blue, red, green {
  .#{$color}-text {color: $color;}
}

A map has slightly different syntax. Here's an example:
$colors: (color1: blue, color2: red, color3: green);

@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}

**
//
$key variable is needed to reference the keys in the map. 
Otherwise, the compiled CSS would have color1, color2... in it. 
Both of the above code examples are converted into the following CSS:

.blue-text {
  color: blue;
}

.red-text {
  color: red;
}

.green-text {
  color: green;
}

**
My code (answer)  : 
<style type='text/scss'>
@each $color in blue, black, red {
  .#{$color}-bg {background-color: $color;}
}

  div {
    height: 200px;
    width: 200px;
  }
</style>

******

Apply a Style Until a Condition is Met with @while

@while directive is an option with similar functionality to the JavaScript while loop. It creates CSS rules until a condition is met.

e.g.:
$x: 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}

**

<style type='text/scss'>
  $x: 1;
  @while $x < 6 {
    .text-#{$x} {font-size: 15px * $x}
    $x: $x + 1;
  }
</style>

******

Split Your Styles into Smaller Chunks with Partials

Partials in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. 
This is a great way to group similar code into a module to keep it organized.

Names for partials start with the underscore (_) character, which tells Sass it is a small segment of CSS 
and not to convert it into a CSS file. Also, Sass files end with the .scss file extension. 
To bring the code in the partial into another Sass file, use the @import directive.

For example, if all your mixins are saved in a partial named "_mixins.scss", and they are needed in the "main.scss" file, 
this is how to use them in the main file:

@import 'mixins'
Note that the underscore and file extension are not needed in the import statement - Sass understands it is a partial. 
Once a partial is imported into a file, all variables, mixins, and other code are available to use.
Write an @import statement to import a partial named _variables.scss into the main.scss file.

my code (answer):
@import "variables"

*******

Extend One Set of CSS Styles to Another Element

@extend allows you to transfer the CSS rules from a class to another one. Also, you're able to add more properties.
e.g.:

.panel{
  background-color: red;
  height: 70px;
  border: 2px solid green;
}

.big-panel{
  @extend .panel;
  width: 150px;
  font-size: 2em;
}


my code ( answer ):

  .info{
    width: 200px;
    border: 1px solid black;
    margin: 0 auto;
  }

  .info-important{
    @extend .info;
    background-color: magenta;
  }






