1 . Create a Redux Store
The Redux store is an object which holds and manages application state. There is a method called createStore() on the Redux object, 
which you use to create the Redux store. This method takes a reducer function as a required argument. 
The reducer function is covered in a later challenge, and is already defined for you in the code editor. It simply takes state as an argument and returns state.

my answer (code) : 
const reducer = (state = 5) => {
  return state;
}

// Redux methods are available from a Redux object
// For example: Redux.createStore()
// Define the store here:

const store = Redux.createStore(reducer);


*************************
2. Get State from the Redux Store

The Redux store object provides several methods that allow you to interact with it. 
For example, you can retrieve the current state held in the Redux store object with the getState() method.


my answer(code): 
const store = Redux.createStore(
  (state = 5) => state
);

// Change code below this line

const currentState = store.getState();


***********************************

3. Define a Redux Action

In Redux, state updates are triggered by actions.

my answer(code):
// Define an action here:
const action = {
  type : "LOGIN"
}

***************************

4. Define an Action Creator

In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action.

my answer (code): 
const action = {
  type: 'LOGIN'
}
// Define an action creator here:

const actionCreator = (action) => {

};


***********************************

5. Dispatch an Action Event

dispatch method is what you use to dispatch actions to the Redux store. 
Calling store.dispatch() and passing the value returned from an action creator sends an action back to the store.

example, the following lines are equivalent, and both dispatch the action of type LOGIN:

store.dispatch(actionCreator());
store.dispatch({ type: 'LOGIN' });



my answer(code):
const store = Redux.createStore(
  (state = {login: false}) => state
);

const loginAction = () => {
  return {
    type: 'LOGIN'
  }
};

// Dispatch the action here:
store.dispatch(loginAction());
store.dispatch({ type: 'LOGIN' });

********************************************

6. Handle an Action in the Store

After an action is created and dispatched, the Redux store needs to know how to respond to that action. 
This is the job of a reducer function. Reducers in Redux are responsible for the state modifications that take place in response to actions. 
A reducer takes state and action as arguments, and it always returns a new state.


my answer (code): 
const defaultState = {
  login: false
};

const reducer = (state = defaultState, action) => {
  // Change code below this line
    if (action.type === 'LOGIN') {
      return {login : true}
    } else {
      {return state}
    }
  // Change code above this line
};

const store = Redux.createStore(reducer);

const loginAction = () => {
  return {
    type: 'LOGIN'
  }
};


**********************************************
7. Use a Switch Statement to Handle Multiple Actions 

You can tell the Redux store how to handle multiple action types. Say you are managing user authentication in your Redux store. 
You want to have a state representation for when users are logged in and when they are logged out. 
You represent this with a single state object with the property authenticated. 
You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves.



my answer(code):

const defaultState = {
  authenticated: false
};

const authReducer = (state = defaultState, action) => {
  // Change code below this line
    switch(action.type) {
      case 'LOGIN':
       return {authenticated: true}
        break;
      
      case 'LOGOUT':
       return {authenticated: false}
        
        break;
      default:
      return defaultState;

    }
  // Change code above this line
};

const store = Redux.createStore(authReducer);

const loginUser = () => {
  return {
    type: 'LOGIN'
  }
};

const logoutUser = () => {
  return {
    type: 'LOGOUT'
  }
};

**********************************


8. Use const for Action Types
A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. 
You can refactor the code you're working with to write the action types as const declarations.


my answer(code):

const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

const defaultState = {
  authenticated: false
};

const authReducer = (state = defaultState, action) => {

  switch (action.type) {
    case LOGIN: 
      return {
        authenticated: true
      }
    case LOGOUT: 
      return {
        authenticated: false
      }

    default:
      return state;

  }

};

const store = Redux.createStore(authReducer);

const loginUser = () => {
  return {
    type: LOGIN
  }
};

const logoutUser = () => {
  return {
    type: LOGOUT
  }
};


*****************************************************

9. Register a Store Listener

Another method you have access to on the Redux store object is store.subscribe(). 
This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. 
One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.




my answer code: 
const ADD = 'ADD';

const reducer = (state = 0, action) => {
  switch(action.type) {
    case ADD:
      return state + 1;
    default:
      return state;
  }
};

const store = Redux.createStore(reducer);
// Global count variable:
let count = 0;

// Change code below this line
const addOne = () => (count += 1);

store.subscribe(addOne)
// Change code above this line

store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);


************************************

10. Combine Multiple Reducers

In order to let us combine multiple reducers together, Redux provides the combineReducers() method. 

write the combineReducers() method like this:

const rootReducer = Redux.combineReducers({
  auth: authenticationReducer,
  notes: notesReducer
});





my answer(code).
const INCREMENT = 'INCREMENT';
const DECREMENT = 'DECREMENT';

const counterReducer = (state = 0, action) => {
  switch(action.type) {
    case INCREMENT:
      return state + 1;
    case DECREMENT:
      return state - 1;
    default:
      return state;
  }
};

const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

const authReducer = (state = {authenticated: false}, action) => {
  switch(action.type) {
    case LOGIN:
      return {
        authenticated: true
      }
    case LOGOUT:
      return {
        authenticated: false
      }
    default:
      return state;
  }
};

const rootReducer = Redux.combineReducers({
    count : counterReducer,
    auth : authReducer
})// Define the root reducer here

const store = Redux.createStore(rootReducer);

*************************************************

11. Send Action Data to the Store


You can also send specific data along with your actions. 
In fact, this is very common because actions usually originate from some user interaction and tend to carry some data with them. 
The Redux store often needs to know about this data.

my code(answer):


my answer(code):
const ADD_NOTE = 'ADD_NOTE';

const notesReducer = (state = 'Initial State', action) => {
  switch(action.type) {
    // Change code below this line
    case ADD_NOTE:
    return action.text;
    // Change code above this line
    default:
      return state;
  }
};

const addNoteText = (note) => {
  // Change code below this line
    return {
            type : ADD_NOTE,
            text : note
            }
  // Change code above this line
};

const store = Redux.createStore(notesReducer);

console.log(store.getState());
store.dispatch(addNoteText('Hello!'));
console.log(store.getState());


*************************************************
12. Use Middleware to Handle Asynchronous Actions

 At some point you'll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests? 
Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware.




my code (answer):

const REQUESTING_DATA = 'REQUESTING_DATA'
const RECEIVED_DATA = 'RECEIVED_DATA'

const requestingData = () => { return {type: REQUESTING_DATA} }
const receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }

const handleAsync = () => {
  return function(dispatch) {
    // Dispatch request action here
    dispatch(requestingData());

    setTimeout(function() {
      let data = {
        users: ['Jeff', 'William', 'Alice']
      }
      // Dispatch received data action here
      dispatch(receivedData(data));
    }, 2500);
  }
};

const defaultState = {
  fetching: false,
  users: []
};

const asyncDataReducer = (state = defaultState, action) => {
  switch(action.type) {
    case REQUESTING_DATA:
      return {
        fetching: true,
        users: []
      }
    case RECEIVED_DATA:
      return {
        fetching: false,
        users: action.users
      }
    default:
      return state;
  }
};

const store = Redux.createStore(
  asyncDataReducer,
  Redux.applyMiddleware(ReduxThunk.default)
);


**************************************************************

13. Write a Counter with Redux




my answer (code): 
const INCREMENT = 'INCREMENT'; // Define a constant for increment action types
const DECREMENT = 'DECREMENT'; // Define a constant for decrement action types

const counterReducer = (state = 0, action) => {
  switch(action.type) {
    case INCREMENT:
      return state + 1
    case DECREMENT:
      return state - 1
    default:
      return state
  }
};


 // Define the counter reducer which will increment or decrement the state based on the action it receives

const incAction = () => {return {type: INCREMENT}}; // Define an action creator for incrementing

const decAction = () => {return {type: DECREMENT}};; // Define an action creator for decrementing

const store = Redux.createStore(
  (state = 0) => state)
; // Define the Redux store here, passing in your reducers


************************************

14. Never Mutate State

Redux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. 
Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, 
whether it is a string, number, array, or object. Note that strings and numbers are primitive values and are immutable by nature. 
In other words, 3 is always 3. You cannot change the value of the number 3. An array or object, however, is mutable. 
In practice, your state will probably consist of an array or object, as these are useful data structures for representing many types of information.

my answer(code):

const ADD_TO_DO = 'ADD_TO_DO';

// A list of strings representing tasks to do:
const todos = [
  'Go to the store',
  'Clean the house',
  'Cook dinner',
  'Learn to code',
];

const immutableReducer = (state = todos, action) => {
  switch(action.type) {
    case ADD_TO_DO:
      // Don't mutate state here or the tests will fail
      return [...state,  action.todo];
    default:
      return state;
  }
};

const addToDo = (todo) => {
  return {
    type: ADD_TO_DO,
    todo
  }
}

const store = Redux.createStore(immutableReducer);


********************************************************************

15. Use the Spread Operator on Arrays


The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array. 
This is relatively new, but commonly used syntax. For example, if you have an array myArray and write:

let newArray = [...myArray];

newArray is now a clone of myArray.

The ... effectively spreads out the values in myArray into a new array. To clone an array but add additional values in the new array, you could write 
[...myArray, 'new value']. This would return a new array composed of the values in myArray and the string new value as the last value. 

my code(answer):


const immutableReducer = (state = ['Do not mutate state!'], action) => {
  switch(action.type) {
    case 'ADD_TO_DO':
      // Don't mutate state here or the tests will fail
      return [...state, action.todo]
    default:
      return state;
  }
};

const addToDo = (todo) => {
  return {
    type: 'ADD_TO_DO',
    todo
  }
}

const store = Redux.createStore(immutableReducer);


*******************************************************

16. 












